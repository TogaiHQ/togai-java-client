/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.core.service.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.core.service.client.model.PricingCycleStartOffset;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * Represents configurations related to pricing cycle
 */
@ApiModel(description = "Represents configurations related to pricing cycle")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-26T12:56:18.144176+05:30[Asia/Kolkata]")
public class PricingCycle implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets interval
   */
  @JsonAdapter(IntervalEnum.Adapter.class)
  public enum IntervalEnum {
    MONTHLY("MONTHLY"),
    
    QUARTERLY("QUARTERLY"),
    
    HALF_YEARLY("HALF_YEARLY"),
    
    ANNUALLY("ANNUALLY");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntervalEnum fromValue(String value) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntervalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private IntervalEnum interval;

  /**
   * Gets or Sets startType
   */
  @JsonAdapter(StartTypeEnum.Adapter.class)
  public enum StartTypeEnum {
    STATIC("STATIC");

    private String value;

    StartTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StartTypeEnum fromValue(String value) {
      for (StartTypeEnum b : StartTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StartTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StartTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StartTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StartTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_START_TYPE = "startType";
  @SerializedName(SERIALIZED_NAME_START_TYPE)
  private StartTypeEnum startType;

  public static final String SERIALIZED_NAME_START_OFFSET = "startOffset";
  @SerializedName(SERIALIZED_NAME_START_OFFSET)
  private PricingCycleStartOffset startOffset;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "gracePeriod";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private Integer gracePeriod;

  public PricingCycle() {
  }

  public PricingCycle interval(IntervalEnum interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public IntervalEnum getInterval() {
    return interval;
  }


  public void setInterval(IntervalEnum interval) {
    this.interval = interval;
  }


  public PricingCycle startType(StartTypeEnum startType) {
    
    this.startType = startType;
    return this;
  }

   /**
   * Get startType
   * @return startType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StartTypeEnum getStartType() {
    return startType;
  }


  public void setStartType(StartTypeEnum startType) {
    this.startType = startType;
  }


  public PricingCycle startOffset(PricingCycleStartOffset startOffset) {
    
    this.startOffset = startOffset;
    return this;
  }

   /**
   * Get startOffset
   * @return startOffset
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PricingCycleStartOffset getStartOffset() {
    return startOffset;
  }


  public void setStartOffset(PricingCycleStartOffset startOffset) {
    this.startOffset = startOffset;
  }


  public PricingCycle gracePeriod(Integer gracePeriod) {
    
    this.gracePeriod = gracePeriod;
    return this;
  }

   /**
   * Get gracePeriod
   * @return gracePeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3", required = true, value = "")

  public Integer getGracePeriod() {
    return gracePeriod;
  }


  public void setGracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingCycle pricingCycle = (PricingCycle) o;
    return Objects.equals(this.interval, pricingCycle.interval) &&
        Objects.equals(this.startType, pricingCycle.startType) &&
        Objects.equals(this.startOffset, pricingCycle.startOffset) &&
        Objects.equals(this.gracePeriod, pricingCycle.gracePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interval, startType, startOffset, gracePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingCycle {\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    startType: ").append(toIndentedString(startType)).append("\n");
    sb.append("    startOffset: ").append(toIndentedString(startOffset)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

