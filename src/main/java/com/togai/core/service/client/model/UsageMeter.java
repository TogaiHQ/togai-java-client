/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.core.service.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

/**
 * Structure of usage meter
 */
@ApiModel(description = "Structure of usage meter")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-26T12:56:18.144176+05:30[Asia/Kolkata]")
public class UsageMeter implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Type of usage meter
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COUNTER("COUNTER"),
    
    GAUGE("GAUGE"),
    
    TIMER("TIMER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Status of usage meter
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    ARCHIVED("ARCHIVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Aggregation to be applied on usage meter result
   */
  @JsonAdapter(AggregationEnum.Adapter.class)
  public enum AggregationEnum {
    COUNT("COUNT"),
    
    SUM("SUM");

    private String value;

    AggregationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationEnum fromValue(String value) {
      for (AggregationEnum b : AggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION = "aggregation";
  @SerializedName(SERIALIZED_NAME_AGGREGATION)
  private AggregationEnum aggregation;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private String filters;

  public static final String SERIALIZED_NAME_COMPUTATION = "computation";
  @SerializedName(SERIALIZED_NAME_COMPUTATION)
  private String computation;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_ACTIVATED_AT = "lastActivatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVATED_AT)
  private OffsetDateTime lastActivatedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public UsageMeter() {
  }

  public UsageMeter name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the usage meter
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "rides-usage", required = true, value = "Name of the usage meter")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UsageMeter description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Meter to track cab rides", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public UsageMeter type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of usage meter
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "COUNTER", required = true, value = "Type of usage meter")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UsageMeter status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of usage meter
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DRAFT", value = "Status of usage meter")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public UsageMeter aggregation(AggregationEnum aggregation) {
    
    this.aggregation = aggregation;
    return this;
  }

   /**
   * Aggregation to be applied on usage meter result
   * @return aggregation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "COUNT", required = true, value = "Aggregation to be applied on usage meter result")

  public AggregationEnum getAggregation() {
    return aggregation;
  }


  public void setAggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
  }


  public UsageMeter filters(String filters) {
    
    this.filters = filters;
    return this;
  }

   /**
   * Filters to be applied on event before matching to usage meter in JSONLogic format (https://jsonlogic.com/) 
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{   \"and\": [     {\"in\": [{\"var\": \"dimension.city\"}, \"chennai\", \"mumbai\"]},     \"or\": [       {\">\": [{\"var\": \"attribute.distance\"}, 100]},       {\"<\": [{\"var\": \"attribute.distance\"}, 20]}     ]   ] } ", value = "Filters to be applied on event before matching to usage meter in JSONLogic format (https://jsonlogic.com/) ")

  public String getFilters() {
    return filters;
  }


  public void setFilters(String filters) {
    this.filters = filters;
  }


  public UsageMeter computation(String computation) {
    
    this.computation = computation;
    return this;
  }

   /**
   * Computation. Has no effect if aggregation is &#39;count&#39;
   * @return computation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"*\":[{\"var\":\"attributes.distance\"},0.4]}", value = "Computation. Has no effect if aggregation is 'count'")

  public String getComputation() {
    return computation;
  }


  public void setComputation(String computation) {
    this.computation = computation;
  }


  public UsageMeter createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UsageMeter lastActivatedAt(OffsetDateTime lastActivatedAt) {
    
    this.lastActivatedAt = lastActivatedAt;
    return this;
  }

   /**
   * Get lastActivatedAt
   * @return lastActivatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastActivatedAt() {
    return lastActivatedAt;
  }


  public void setLastActivatedAt(OffsetDateTime lastActivatedAt) {
    this.lastActivatedAt = lastActivatedAt;
  }


  public UsageMeter updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageMeter usageMeter = (UsageMeter) o;
    return Objects.equals(this.name, usageMeter.name) &&
        Objects.equals(this.description, usageMeter.description) &&
        Objects.equals(this.type, usageMeter.type) &&
        Objects.equals(this.status, usageMeter.status) &&
        Objects.equals(this.aggregation, usageMeter.aggregation) &&
        Objects.equals(this.filters, usageMeter.filters) &&
        Objects.equals(this.computation, usageMeter.computation) &&
        Objects.equals(this.createdAt, usageMeter.createdAt) &&
        Objects.equals(this.lastActivatedAt, usageMeter.lastActivatedAt) &&
        Objects.equals(this.updatedAt, usageMeter.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, type, status, aggregation, filters, computation, createdAt, lastActivatedAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageMeter {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    computation: ").append(toIndentedString(computation)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastActivatedAt: ").append(toIndentedString(lastActivatedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

