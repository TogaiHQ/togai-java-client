/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.core.service.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * Represents the start of pricing cycle in terms of  - dayOffset - number of days from beginning of month and  - monthOffset - number of months from beginning of interval (quarter, half-year or year) Note: If a day with offset doesn&#39;t exist for a month, closest previous day is considered Examples: MONTHLY -   - {dayOffset: 1} - First day of every month   - {dayOffset: 12} - 12th of every month   - {dayOffset: 28} - 28th of every month. i.e, 28th of Jan, 28th of Feb, ...   - {dayOffset: 30} - 30th of every month. i.e, 28th of Jan, 28th of Feb, ...   - {dayOffset: LAST} - Last day of every month. i.e, 31st of Jan, 28th of Feb, ... QUARTERLY   - {dayOffset: 15, monthOffset: FIRST} - 15th Jan, 15th Apr, 15th Jul and 15th Oct   - {dayOffset: 15, monthOffset: 2} - 15th Feb, 15th May, 15th Aug and 15th Nov   - {dayOffset: 15, monthOffset: LAST} - 15th Mar, 15th Jun, 15th Sep and 15th Dec   - {dayOffset: LAST, monthOffset: FIRST} - 31st Jan, 30th Apr, 30th Jul and 31th Oct HALF_YEARLY   - {dayOffset: 15, monthOffset: FIRST} - 15th Jan and 15th Jul   - {dayOffset: 15, monthOffset: 4} - 15th Apr and 15th Oct   - {dayOffset: 15, monthOffset: LAST} - 15th Jun and 15th Dec ANNUALLY   - {dayOffset: 15, monthOffset: FIRST} - 15th Jan   - {dayOffset: 15, monthOffset: 1} - 15th Jan   - {dayOffset: LAST, monthOffset: 2} - 29th Feb on Leap year, 28th otherwise    - {dayOffset: 15, monthOffset: 8} - 15th Aug   - {dayOffset: 15, monthOffset: LAST} - 15th Dec 
 */
@ApiModel(description = "Represents the start of pricing cycle in terms of  - dayOffset - number of days from beginning of month and  - monthOffset - number of months from beginning of interval (quarter, half-year or year) Note: If a day with offset doesn't exist for a month, closest previous day is considered Examples: MONTHLY -   - {dayOffset: 1} - First day of every month   - {dayOffset: 12} - 12th of every month   - {dayOffset: 28} - 28th of every month. i.e, 28th of Jan, 28th of Feb, ...   - {dayOffset: 30} - 30th of every month. i.e, 28th of Jan, 28th of Feb, ...   - {dayOffset: LAST} - Last day of every month. i.e, 31st of Jan, 28th of Feb, ... QUARTERLY   - {dayOffset: 15, monthOffset: FIRST} - 15th Jan, 15th Apr, 15th Jul and 15th Oct   - {dayOffset: 15, monthOffset: 2} - 15th Feb, 15th May, 15th Aug and 15th Nov   - {dayOffset: 15, monthOffset: LAST} - 15th Mar, 15th Jun, 15th Sep and 15th Dec   - {dayOffset: LAST, monthOffset: FIRST} - 31st Jan, 30th Apr, 30th Jul and 31th Oct HALF_YEARLY   - {dayOffset: 15, monthOffset: FIRST} - 15th Jan and 15th Jul   - {dayOffset: 15, monthOffset: 4} - 15th Apr and 15th Oct   - {dayOffset: 15, monthOffset: LAST} - 15th Jun and 15th Dec ANNUALLY   - {dayOffset: 15, monthOffset: FIRST} - 15th Jan   - {dayOffset: 15, monthOffset: 1} - 15th Jan   - {dayOffset: LAST, monthOffset: 2} - 29th Feb on Leap year, 28th otherwise    - {dayOffset: 15, monthOffset: 8} - 15th Aug   - {dayOffset: 15, monthOffset: LAST} - 15th Dec ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-26T12:56:18.144176+05:30[Asia/Kolkata]")
public class PricingCycleStartOffset implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DAY_OFFSET = "dayOffset";
  @SerializedName(SERIALIZED_NAME_DAY_OFFSET)
  private String dayOffset;

  public static final String SERIALIZED_NAME_MONTH_OFFSET = "monthOffset";
  @SerializedName(SERIALIZED_NAME_MONTH_OFFSET)
  private String monthOffset;

  public PricingCycleStartOffset() {
  }

  public PricingCycleStartOffset dayOffset(String dayOffset) {
    
    this.dayOffset = dayOffset;
    return this;
  }

   /**
   * min: \&quot;1\&quot; and max: \&quot;31\&quot; as strings. Spl. string allowed: LAST 
   * @return dayOffset
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "min: \"1\" and max: \"31\" as strings. Spl. string allowed: LAST ")

  public String getDayOffset() {
    return dayOffset;
  }


  public void setDayOffset(String dayOffset) {
    this.dayOffset = dayOffset;
  }


  public PricingCycleStartOffset monthOffset(String monthOffset) {
    
    this.monthOffset = monthOffset;
    return this;
  }

   /**
   * min: \&quot;1\&quot; and max: \&quot;12\&quot;. Spl. string allowed: FIRST / LAST. For QUARTERLY only 1 - 3 is allowed and for HALF_YEARLY 1 - 6. This being an optional field, shouldn&#39;t be passed for MONTHLY. 
   * @return monthOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "min: \"1\" and max: \"12\". Spl. string allowed: FIRST / LAST. For QUARTERLY only 1 - 3 is allowed and for HALF_YEARLY 1 - 6. This being an optional field, shouldn't be passed for MONTHLY. ")

  public String getMonthOffset() {
    return monthOffset;
  }


  public void setMonthOffset(String monthOffset) {
    this.monthOffset = monthOffset;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingCycleStartOffset pricingCycleStartOffset = (PricingCycleStartOffset) o;
    return Objects.equals(this.dayOffset, pricingCycleStartOffset.dayOffset) &&
        Objects.equals(this.monthOffset, pricingCycleStartOffset.monthOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOffset, monthOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingCycleStartOffset {\n");
    sb.append("    dayOffset: ").append(toIndentedString(dayOffset)).append("\n");
    sb.append("    monthOffset: ").append(toIndentedString(monthOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

