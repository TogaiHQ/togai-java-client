/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.api;

import com.togai.client.ApiCallback;
import com.togai.client.ApiClient;
import com.togai.client.ApiException;
import com.togai.client.ApiResponse;
import com.togai.client.Configuration;
import com.togai.client.Pair;
import com.togai.client.ProgressRequestBody;
import com.togai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.togai.client.models.BaseSuccessResponse;
import com.togai.client.models.CreateUsageMeterRequest;
import com.togai.client.models.ErrorResponse;
import com.togai.client.models.UpdateUsageMeterRequest;
import com.togai.client.models.UsageMeter;
import com.togai.client.models.UsageMeterPaginatedResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsageMetersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsageMetersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsageMetersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateUsageMeter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateUsageMeterCall(String eventSchemaName, String usageMeterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event_schema/{event_schema_name}/usage_meters/{usage_meter_name}/activate"
            .replaceAll("\\{" + "event_schema_name" + "\\}", localVarApiClient.escapeString(eventSchemaName.toString()))
            .replaceAll("\\{" + "usage_meter_name" + "\\}", localVarApiClient.escapeString(usageMeterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateUsageMeterValidateBeforeCall(String eventSchemaName, String usageMeterName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventSchemaName' is set
        if (eventSchemaName == null) {
            throw new ApiException("Missing the required parameter 'eventSchemaName' when calling activateUsageMeter(Async)");
        }
        
        // verify the required parameter 'usageMeterName' is set
        if (usageMeterName == null) {
            throw new ApiException("Missing the required parameter 'usageMeterName' when calling activateUsageMeter(Async)");
        }
        

        okhttp3.Call localVarCall = activateUsageMeterCall(eventSchemaName, usageMeterName, _callback);
        return localVarCall;

    }

    /**
     * Activate usage meter
     * Activate usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @return UsageMeter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public UsageMeter activateUsageMeter(String eventSchemaName, String usageMeterName) throws ApiException {
        ApiResponse<UsageMeter> localVarResp = activateUsageMeterWithHttpInfo(eventSchemaName, usageMeterName);
        return localVarResp.getData();
    }

    /**
     * Activate usage meter
     * Activate usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @return ApiResponse&lt;UsageMeter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageMeter> activateUsageMeterWithHttpInfo(String eventSchemaName, String usageMeterName) throws ApiException {
        okhttp3.Call localVarCall = activateUsageMeterValidateBeforeCall(eventSchemaName, usageMeterName, null);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate usage meter (asynchronously)
     * Activate usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateUsageMeterAsync(String eventSchemaName, String usageMeterName, final ApiCallback<UsageMeter> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateUsageMeterValidateBeforeCall(eventSchemaName, usageMeterName, _callback);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUsageMeter
     * @param eventSchemaName  (required)
     * @param createUsageMeterRequest Payload to create usage meter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUsageMeterCall(String eventSchemaName, CreateUsageMeterRequest createUsageMeterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUsageMeterRequest;

        // create path and map variables
        String localVarPath = "/event_schema/{event_schema_name}/usage_meters"
            .replaceAll("\\{" + "event_schema_name" + "\\}", localVarApiClient.escapeString(eventSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUsageMeterValidateBeforeCall(String eventSchemaName, CreateUsageMeterRequest createUsageMeterRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventSchemaName' is set
        if (eventSchemaName == null) {
            throw new ApiException("Missing the required parameter 'eventSchemaName' when calling createUsageMeter(Async)");
        }
        
        // verify the required parameter 'createUsageMeterRequest' is set
        if (createUsageMeterRequest == null) {
            throw new ApiException("Missing the required parameter 'createUsageMeterRequest' when calling createUsageMeter(Async)");
        }
        

        okhttp3.Call localVarCall = createUsageMeterCall(eventSchemaName, createUsageMeterRequest, _callback);
        return localVarCall;

    }

    /**
     * Create an usage meter
     * Create an usage meter
     * @param eventSchemaName  (required)
     * @param createUsageMeterRequest Payload to create usage meter (required)
     * @return UsageMeter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public UsageMeter createUsageMeter(String eventSchemaName, CreateUsageMeterRequest createUsageMeterRequest) throws ApiException {
        ApiResponse<UsageMeter> localVarResp = createUsageMeterWithHttpInfo(eventSchemaName, createUsageMeterRequest);
        return localVarResp.getData();
    }

    /**
     * Create an usage meter
     * Create an usage meter
     * @param eventSchemaName  (required)
     * @param createUsageMeterRequest Payload to create usage meter (required)
     * @return ApiResponse&lt;UsageMeter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageMeter> createUsageMeterWithHttpInfo(String eventSchemaName, CreateUsageMeterRequest createUsageMeterRequest) throws ApiException {
        okhttp3.Call localVarCall = createUsageMeterValidateBeforeCall(eventSchemaName, createUsageMeterRequest, null);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an usage meter (asynchronously)
     * Create an usage meter
     * @param eventSchemaName  (required)
     * @param createUsageMeterRequest Payload to create usage meter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUsageMeterAsync(String eventSchemaName, CreateUsageMeterRequest createUsageMeterRequest, final ApiCallback<UsageMeter> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUsageMeterValidateBeforeCall(eventSchemaName, createUsageMeterRequest, _callback);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deactivateUsageMeter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateUsageMeterCall(String eventSchemaName, String usageMeterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event_schema/{event_schema_name}/usage_meters/{usage_meter_name}/deactivate"
            .replaceAll("\\{" + "event_schema_name" + "\\}", localVarApiClient.escapeString(eventSchemaName.toString()))
            .replaceAll("\\{" + "usage_meter_name" + "\\}", localVarApiClient.escapeString(usageMeterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateUsageMeterValidateBeforeCall(String eventSchemaName, String usageMeterName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventSchemaName' is set
        if (eventSchemaName == null) {
            throw new ApiException("Missing the required parameter 'eventSchemaName' when calling deactivateUsageMeter(Async)");
        }
        
        // verify the required parameter 'usageMeterName' is set
        if (usageMeterName == null) {
            throw new ApiException("Missing the required parameter 'usageMeterName' when calling deactivateUsageMeter(Async)");
        }
        

        okhttp3.Call localVarCall = deactivateUsageMeterCall(eventSchemaName, usageMeterName, _callback);
        return localVarCall;

    }

    /**
     * Deactivate usage meter
     * Deactivate usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @return UsageMeter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public UsageMeter deactivateUsageMeter(String eventSchemaName, String usageMeterName) throws ApiException {
        ApiResponse<UsageMeter> localVarResp = deactivateUsageMeterWithHttpInfo(eventSchemaName, usageMeterName);
        return localVarResp.getData();
    }

    /**
     * Deactivate usage meter
     * Deactivate usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @return ApiResponse&lt;UsageMeter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageMeter> deactivateUsageMeterWithHttpInfo(String eventSchemaName, String usageMeterName) throws ApiException {
        okhttp3.Call localVarCall = deactivateUsageMeterValidateBeforeCall(eventSchemaName, usageMeterName, null);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deactivate usage meter (asynchronously)
     * Deactivate usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateUsageMeterAsync(String eventSchemaName, String usageMeterName, final ApiCallback<UsageMeter> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateUsageMeterValidateBeforeCall(eventSchemaName, usageMeterName, _callback);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUsageMeter
     * @param usageMeterName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUsageMeterCall(String usageMeterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage_meter/{usage_meter_name}"
            .replaceAll("\\{" + "usage_meter_name" + "\\}", localVarApiClient.escapeString(usageMeterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUsageMeterValidateBeforeCall(String usageMeterName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'usageMeterName' is set
        if (usageMeterName == null) {
            throw new ApiException("Missing the required parameter 'usageMeterName' when calling deleteUsageMeter(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUsageMeterCall(usageMeterName, _callback);
        return localVarCall;

    }

    /**
     * Delete an Usage Meter
     * Delete an Usage Meter
     * @param usageMeterName  (required)
     * @return BaseSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BaseSuccessResponse deleteUsageMeter(String usageMeterName) throws ApiException {
        ApiResponse<BaseSuccessResponse> localVarResp = deleteUsageMeterWithHttpInfo(usageMeterName);
        return localVarResp.getData();
    }

    /**
     * Delete an Usage Meter
     * Delete an Usage Meter
     * @param usageMeterName  (required)
     * @return ApiResponse&lt;BaseSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseSuccessResponse> deleteUsageMeterWithHttpInfo(String usageMeterName) throws ApiException {
        okhttp3.Call localVarCall = deleteUsageMeterValidateBeforeCall(usageMeterName, null);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Usage Meter (asynchronously)
     * Delete an Usage Meter
     * @param usageMeterName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUsageMeterAsync(String usageMeterName, final ApiCallback<BaseSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUsageMeterValidateBeforeCall(usageMeterName, _callback);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsageMeter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsageMeterCall(String eventSchemaName, String usageMeterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event_schema/{event_schema_name}/usage_meters/{usage_meter_name}"
            .replaceAll("\\{" + "event_schema_name" + "\\}", localVarApiClient.escapeString(eventSchemaName.toString()))
            .replaceAll("\\{" + "usage_meter_name" + "\\}", localVarApiClient.escapeString(usageMeterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsageMeterValidateBeforeCall(String eventSchemaName, String usageMeterName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventSchemaName' is set
        if (eventSchemaName == null) {
            throw new ApiException("Missing the required parameter 'eventSchemaName' when calling getUsageMeter(Async)");
        }
        
        // verify the required parameter 'usageMeterName' is set
        if (usageMeterName == null) {
            throw new ApiException("Missing the required parameter 'usageMeterName' when calling getUsageMeter(Async)");
        }
        

        okhttp3.Call localVarCall = getUsageMeterCall(eventSchemaName, usageMeterName, _callback);
        return localVarCall;

    }

    /**
     * Get usage meter
     * Get usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @return UsageMeter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public UsageMeter getUsageMeter(String eventSchemaName, String usageMeterName) throws ApiException {
        ApiResponse<UsageMeter> localVarResp = getUsageMeterWithHttpInfo(eventSchemaName, usageMeterName);
        return localVarResp.getData();
    }

    /**
     * Get usage meter
     * Get usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @return ApiResponse&lt;UsageMeter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageMeter> getUsageMeterWithHttpInfo(String eventSchemaName, String usageMeterName) throws ApiException {
        okhttp3.Call localVarCall = getUsageMeterValidateBeforeCall(eventSchemaName, usageMeterName, null);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get usage meter (asynchronously)
     * Get usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsageMeterAsync(String eventSchemaName, String usageMeterName, final ApiCallback<UsageMeter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsageMeterValidateBeforeCall(eventSchemaName, usageMeterName, _callback);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsageMetersForEventSchema
     * @param eventSchemaName  (required)
     * @param statuses Filter by provided statuses (optional)
     * @param aggregations Filter by provided aggregations (optional)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param sortOrder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list usage_meters request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsageMetersForEventSchemaCall(String eventSchemaName, String statuses, String aggregations, String nextToken, String pageSize, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event_schema/{event_schema_name}/usage_meters"
            .replaceAll("\\{" + "event_schema_name" + "\\}", localVarApiClient.escapeString(eventSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (aggregations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregations", aggregations));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsageMetersForEventSchemaValidateBeforeCall(String eventSchemaName, String statuses, String aggregations, String nextToken, String pageSize, String sortOrder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventSchemaName' is set
        if (eventSchemaName == null) {
            throw new ApiException("Missing the required parameter 'eventSchemaName' when calling getUsageMetersForEventSchema(Async)");
        }
        

        okhttp3.Call localVarCall = getUsageMetersForEventSchemaCall(eventSchemaName, statuses, aggregations, nextToken, pageSize, sortOrder, _callback);
        return localVarCall;

    }

    /**
     * List usage meters for event schema
     * List usage meters for event schema with pagination and sort
     * @param eventSchemaName  (required)
     * @param statuses Filter by provided statuses (optional)
     * @param aggregations Filter by provided aggregations (optional)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param sortOrder  (optional)
     * @return UsageMeterPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list usage_meters request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public UsageMeterPaginatedResponse getUsageMetersForEventSchema(String eventSchemaName, String statuses, String aggregations, String nextToken, String pageSize, String sortOrder) throws ApiException {
        ApiResponse<UsageMeterPaginatedResponse> localVarResp = getUsageMetersForEventSchemaWithHttpInfo(eventSchemaName, statuses, aggregations, nextToken, pageSize, sortOrder);
        return localVarResp.getData();
    }

    /**
     * List usage meters for event schema
     * List usage meters for event schema with pagination and sort
     * @param eventSchemaName  (required)
     * @param statuses Filter by provided statuses (optional)
     * @param aggregations Filter by provided aggregations (optional)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param sortOrder  (optional)
     * @return ApiResponse&lt;UsageMeterPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list usage_meters request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageMeterPaginatedResponse> getUsageMetersForEventSchemaWithHttpInfo(String eventSchemaName, String statuses, String aggregations, String nextToken, String pageSize, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getUsageMetersForEventSchemaValidateBeforeCall(eventSchemaName, statuses, aggregations, nextToken, pageSize, sortOrder, null);
        Type localVarReturnType = new TypeToken<UsageMeterPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List usage meters for event schema (asynchronously)
     * List usage meters for event schema with pagination and sort
     * @param eventSchemaName  (required)
     * @param statuses Filter by provided statuses (optional)
     * @param aggregations Filter by provided aggregations (optional)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param sortOrder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list usage_meters request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsageMetersForEventSchemaAsync(String eventSchemaName, String statuses, String aggregations, String nextToken, String pageSize, String sortOrder, final ApiCallback<UsageMeterPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsageMetersForEventSchemaValidateBeforeCall(eventSchemaName, statuses, aggregations, nextToken, pageSize, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<UsageMeterPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUsageMeter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param updateUsageMeterRequest Payload to create usage meter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUsageMeterCall(String eventSchemaName, String usageMeterName, UpdateUsageMeterRequest updateUsageMeterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUsageMeterRequest;

        // create path and map variables
        String localVarPath = "/event_schema/{event_schema_name}/usage_meters/{usage_meter_name}"
            .replaceAll("\\{" + "event_schema_name" + "\\}", localVarApiClient.escapeString(eventSchemaName.toString()))
            .replaceAll("\\{" + "usage_meter_name" + "\\}", localVarApiClient.escapeString(usageMeterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUsageMeterValidateBeforeCall(String eventSchemaName, String usageMeterName, UpdateUsageMeterRequest updateUsageMeterRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventSchemaName' is set
        if (eventSchemaName == null) {
            throw new ApiException("Missing the required parameter 'eventSchemaName' when calling updateUsageMeter(Async)");
        }
        
        // verify the required parameter 'usageMeterName' is set
        if (usageMeterName == null) {
            throw new ApiException("Missing the required parameter 'usageMeterName' when calling updateUsageMeter(Async)");
        }
        
        // verify the required parameter 'updateUsageMeterRequest' is set
        if (updateUsageMeterRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUsageMeterRequest' when calling updateUsageMeter(Async)");
        }
        

        okhttp3.Call localVarCall = updateUsageMeterCall(eventSchemaName, usageMeterName, updateUsageMeterRequest, _callback);
        return localVarCall;

    }

    /**
     * Update an usage meter
     * Update an usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param updateUsageMeterRequest Payload to create usage meter (required)
     * @return UsageMeter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public UsageMeter updateUsageMeter(String eventSchemaName, String usageMeterName, UpdateUsageMeterRequest updateUsageMeterRequest) throws ApiException {
        ApiResponse<UsageMeter> localVarResp = updateUsageMeterWithHttpInfo(eventSchemaName, usageMeterName, updateUsageMeterRequest);
        return localVarResp.getData();
    }

    /**
     * Update an usage meter
     * Update an usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param updateUsageMeterRequest Payload to create usage meter (required)
     * @return ApiResponse&lt;UsageMeter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageMeter> updateUsageMeterWithHttpInfo(String eventSchemaName, String usageMeterName, UpdateUsageMeterRequest updateUsageMeterRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUsageMeterValidateBeforeCall(eventSchemaName, usageMeterName, updateUsageMeterRequest, null);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an usage meter (asynchronously)
     * Update an usage meter
     * @param eventSchemaName  (required)
     * @param usageMeterName  (required)
     * @param updateUsageMeterRequest Payload to create usage meter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get usage event requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUsageMeterAsync(String eventSchemaName, String usageMeterName, UpdateUsageMeterRequest updateUsageMeterRequest, final ApiCallback<UsageMeter> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUsageMeterValidateBeforeCall(eventSchemaName, usageMeterName, updateUsageMeterRequest, _callback);
        Type localVarReturnType = new TypeToken<UsageMeter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
