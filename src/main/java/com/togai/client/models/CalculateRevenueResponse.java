/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.PricePlanDetails;
import com.togai.client.models.RevenueInfo;
import com.togai.client.models.UsageLookupRange;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * CalculateRevenueResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CalculateRevenueResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_USAGE_LOOKUP_RANGE = "usageLookupRange";
  @SerializedName(SERIALIZED_NAME_USAGE_LOOKUP_RANGE)
  private UsageLookupRange usageLookupRange;

  public static final String SERIALIZED_NAME_PRICE_PLAN_DETAILS = "pricePlanDetails";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_DETAILS)
  private PricePlanDetails pricePlanDetails;

  public static final String SERIALIZED_NAME_REVENUE_INFO = "revenueInfo";
  @SerializedName(SERIALIZED_NAME_REVENUE_INFO)
  private List<RevenueInfo> revenueInfo = new ArrayList<>();

  public CalculateRevenueResponse() {
  }

  public CalculateRevenueResponse currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CalculateRevenueResponse usageLookupRange(UsageLookupRange usageLookupRange) {
    
    this.usageLookupRange = usageLookupRange;
    return this;
  }

   /**
   * Get usageLookupRange
   * @return usageLookupRange
  **/
  @javax.annotation.Nullable

  public UsageLookupRange getUsageLookupRange() {
    return usageLookupRange;
  }


  public void setUsageLookupRange(UsageLookupRange usageLookupRange) {
    this.usageLookupRange = usageLookupRange;
  }


  public CalculateRevenueResponse pricePlanDetails(PricePlanDetails pricePlanDetails) {
    
    this.pricePlanDetails = pricePlanDetails;
    return this;
  }

   /**
   * Get pricePlanDetails
   * @return pricePlanDetails
  **/
  @javax.annotation.Nonnull

  public PricePlanDetails getPricePlanDetails() {
    return pricePlanDetails;
  }


  public void setPricePlanDetails(PricePlanDetails pricePlanDetails) {
    this.pricePlanDetails = pricePlanDetails;
  }


  public CalculateRevenueResponse revenueInfo(List<RevenueInfo> revenueInfo) {
    
    this.revenueInfo = revenueInfo;
    return this;
  }

  public CalculateRevenueResponse addRevenueInfoItem(RevenueInfo revenueInfoItem) {
    this.revenueInfo.add(revenueInfoItem);
    return this;
  }

   /**
   * Get revenueInfo
   * @return revenueInfo
  **/
  @javax.annotation.Nonnull

  public List<RevenueInfo> getRevenueInfo() {
    return revenueInfo;
  }


  public void setRevenueInfo(List<RevenueInfo> revenueInfo) {
    this.revenueInfo = revenueInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateRevenueResponse calculateRevenueResponse = (CalculateRevenueResponse) o;
    return Objects.equals(this.currency, calculateRevenueResponse.currency) &&
        Objects.equals(this.usageLookupRange, calculateRevenueResponse.usageLookupRange) &&
        Objects.equals(this.pricePlanDetails, calculateRevenueResponse.pricePlanDetails) &&
        Objects.equals(this.revenueInfo, calculateRevenueResponse.revenueInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, usageLookupRange, pricePlanDetails, revenueInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateRevenueResponse {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    usageLookupRange: ").append(toIndentedString(usageLookupRange)).append("\n");
    sb.append("    pricePlanDetails: ").append(toIndentedString(pricePlanDetails)).append("\n");
    sb.append("    revenueInfo: ").append(toIndentedString(revenueInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("usageLookupRange");
    openapiFields.add("pricePlanDetails");
    openapiFields.add("revenueInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("pricePlanDetails");
    openapiRequiredFields.add("revenueInfo");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CalculateRevenueResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CalculateRevenueResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculateRevenueResponse is not found in the empty JSON string", CalculateRevenueResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CalculateRevenueResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculateRevenueResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CalculateRevenueResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `usageLookupRange`
      if (jsonObj.get("usageLookupRange") != null && !jsonObj.get("usageLookupRange").isJsonNull()) {
        UsageLookupRange.validateJsonObject(jsonObj.getAsJsonObject("usageLookupRange"));
      }
      // validate the required field `pricePlanDetails`
      PricePlanDetails.validateJsonObject(jsonObj.getAsJsonObject("pricePlanDetails"));
      // ensure the json data is an array
      if (!jsonObj.get("revenueInfo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenueInfo` to be an array in the JSON string but got `%s`", jsonObj.get("revenueInfo").toString()));
      }

      JsonArray jsonArrayrevenueInfo = jsonObj.getAsJsonArray("revenueInfo");
      // validate the required field `revenueInfo` (array)
      for (int i = 0; i < jsonArrayrevenueInfo.size(); i++) {
        RevenueInfo.validateJsonObject(jsonArrayrevenueInfo.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculateRevenueResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculateRevenueResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculateRevenueResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculateRevenueResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculateRevenueResponse>() {
           @Override
           public void write(JsonWriter out, CalculateRevenueResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculateRevenueResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CalculateRevenueResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CalculateRevenueResponse
  * @throws IOException if the JSON string is invalid with respect to CalculateRevenueResponse
  */
  public static CalculateRevenueResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculateRevenueResponse.class);
  }

 /**
  * Convert an instance of CalculateRevenueResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

