/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.PricingCycle;
import com.togai.client.models.PricingSchedule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Price plan entity
 */
@ApiModel(description = "Price plan entity")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PricePlan implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Status of Price plan
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    ACTIVE("ACTIVE"),
    
    ARCHIVED("ARCHIVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_PRICING_CYCLE = "pricingCycle";
  @SerializedName(SERIALIZED_NAME_PRICING_CYCLE)
  private PricingCycle pricingCycle;

  public static final String SERIALIZED_NAME_PRICING_SCHEDULE = "pricingSchedule";
  @SerializedName(SERIALIZED_NAME_PRICING_SCHEDULE)
  private List<PricingSchedule> pricingSchedule = new ArrayList<>();

  public PricePlan() {
  }

  public PricePlan name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the price plan
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the price plan")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PricePlan description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of price plan
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of price plan")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public PricePlan status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of Price plan
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Status of Price plan")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PricePlan pricingCycle(PricingCycle pricingCycle) {
    
    this.pricingCycle = pricingCycle;
    return this;
  }

   /**
   * Get pricingCycle
   * @return pricingCycle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PricingCycle getPricingCycle() {
    return pricingCycle;
  }


  public void setPricingCycle(PricingCycle pricingCycle) {
    this.pricingCycle = pricingCycle;
  }


  public PricePlan pricingSchedule(List<PricingSchedule> pricingSchedule) {
    
    this.pricingSchedule = pricingSchedule;
    return this;
  }

  public PricePlan addPricingScheduleItem(PricingSchedule pricingScheduleItem) {
    this.pricingSchedule.add(pricingScheduleItem);
    return this;
  }

   /**
   * Get pricingSchedule
   * @return pricingSchedule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<PricingSchedule> getPricingSchedule() {
    return pricingSchedule;
  }


  public void setPricingSchedule(List<PricingSchedule> pricingSchedule) {
    this.pricingSchedule = pricingSchedule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricePlan pricePlan = (PricePlan) o;
    return Objects.equals(this.name, pricePlan.name) &&
        Objects.equals(this.description, pricePlan.description) &&
        Objects.equals(this.status, pricePlan.status) &&
        Objects.equals(this.pricingCycle, pricePlan.pricingCycle) &&
        Objects.equals(this.pricingSchedule, pricePlan.pricingSchedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, status, pricingCycle, pricingSchedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricePlan {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    pricingCycle: ").append(toIndentedString(pricingCycle)).append("\n");
    sb.append("    pricingSchedule: ").append(toIndentedString(pricingSchedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("status");
    openapiFields.add("pricingCycle");
    openapiFields.add("pricingSchedule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("pricingCycle");
    openapiRequiredFields.add("pricingSchedule");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PricePlan
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PricePlan.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricePlan is not found in the empty JSON string", PricePlan.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PricePlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricePlan` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PricePlan.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `pricingCycle`
      if (jsonObj.get("pricingCycle") != null && !jsonObj.get("pricingCycle").isJsonNull()) {
        PricingCycle.validateJsonObject(jsonObj.getAsJsonObject("pricingCycle"));
      }
      JsonArray jsonArraypricingSchedule = jsonObj.getAsJsonArray("pricingSchedule");
      if (jsonArraypricingSchedule != null) {
        // ensure the json data is an array
        if (!jsonObj.get("pricingSchedule").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `pricingSchedule` to be an array in the JSON string but got `%s`", jsonObj.get("pricingSchedule").toString()));
        }

        // validate the optional field `pricingSchedule` (array)
        for (int i = 0; i < jsonArraypricingSchedule.size(); i++) {
          PricingSchedule.validateJsonObject(jsonArraypricingSchedule.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricePlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricePlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricePlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricePlan.class));

       return (TypeAdapter<T>) new TypeAdapter<PricePlan>() {
           @Override
           public void write(JsonWriter out, PricePlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricePlan read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PricePlan given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PricePlan
  * @throws IOException if the JSON string is invalid with respect to PricePlan
  */
  public static PricePlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricePlan.class);
  }

 /**
  * Convert an instance of PricePlan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

