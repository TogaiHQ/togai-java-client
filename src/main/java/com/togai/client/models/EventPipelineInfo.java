/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.EventPipelineInfoAccount;
import com.togai.client.models.EventPipelineInfoCustomer;
import com.togai.client.models.EventPipelineInfoEnrichments;
import com.togai.client.models.EventPipelineInfoEventSchema;
import com.togai.client.models.EventPipelineInfoPricePlans;
import com.togai.client.models.EventPipelineInfoUsageMeters;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Information related to ingestion of an event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventPipelineInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EVENT_SCHEMA = "eventSchema";
  @SerializedName(SERIALIZED_NAME_EVENT_SCHEMA)
  private EventPipelineInfoEventSchema eventSchema;

  public static final String SERIALIZED_NAME_USAGE_METERS = "usageMeters";
  @SerializedName(SERIALIZED_NAME_USAGE_METERS)
  private List<EventPipelineInfoUsageMeters> usageMeters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_PLANS = "pricePlans";
  @SerializedName(SERIALIZED_NAME_PRICE_PLANS)
  private List<EventPipelineInfoPricePlans> pricePlans = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private EventPipelineInfoAccount account;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private EventPipelineInfoCustomer customer;

  public static final String SERIALIZED_NAME_ENRICHMENTS = "enrichments";
  @SerializedName(SERIALIZED_NAME_ENRICHMENTS)
  private EventPipelineInfoEnrichments enrichments;

  public EventPipelineInfo() {
  }

  public EventPipelineInfo eventSchema(EventPipelineInfoEventSchema eventSchema) {
    
    this.eventSchema = eventSchema;
    return this;
  }

   /**
   * Get eventSchema
   * @return eventSchema
  **/
  @javax.annotation.Nullable

  public EventPipelineInfoEventSchema getEventSchema() {
    return eventSchema;
  }


  public void setEventSchema(EventPipelineInfoEventSchema eventSchema) {
    this.eventSchema = eventSchema;
  }


  public EventPipelineInfo usageMeters(List<EventPipelineInfoUsageMeters> usageMeters) {
    
    this.usageMeters = usageMeters;
    return this;
  }

  public EventPipelineInfo addUsageMetersItem(EventPipelineInfoUsageMeters usageMetersItem) {
    if (this.usageMeters == null) {
      this.usageMeters = new ArrayList<>();
    }
    this.usageMeters.add(usageMetersItem);
    return this;
  }

   /**
   * Get usageMeters
   * @return usageMeters
  **/
  @javax.annotation.Nullable

  public List<EventPipelineInfoUsageMeters> getUsageMeters() {
    return usageMeters;
  }


  public void setUsageMeters(List<EventPipelineInfoUsageMeters> usageMeters) {
    this.usageMeters = usageMeters;
  }


  public EventPipelineInfo pricePlans(List<EventPipelineInfoPricePlans> pricePlans) {
    
    this.pricePlans = pricePlans;
    return this;
  }

  public EventPipelineInfo addPricePlansItem(EventPipelineInfoPricePlans pricePlansItem) {
    if (this.pricePlans == null) {
      this.pricePlans = new ArrayList<>();
    }
    this.pricePlans.add(pricePlansItem);
    return this;
  }

   /**
   * Get pricePlans
   * @return pricePlans
  **/
  @javax.annotation.Nullable

  public List<EventPipelineInfoPricePlans> getPricePlans() {
    return pricePlans;
  }


  public void setPricePlans(List<EventPipelineInfoPricePlans> pricePlans) {
    this.pricePlans = pricePlans;
  }


  public EventPipelineInfo account(EventPipelineInfoAccount account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable

  public EventPipelineInfoAccount getAccount() {
    return account;
  }


  public void setAccount(EventPipelineInfoAccount account) {
    this.account = account;
  }


  public EventPipelineInfo customer(EventPipelineInfoCustomer customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable

  public EventPipelineInfoCustomer getCustomer() {
    return customer;
  }


  public void setCustomer(EventPipelineInfoCustomer customer) {
    this.customer = customer;
  }


  public EventPipelineInfo enrichments(EventPipelineInfoEnrichments enrichments) {
    
    this.enrichments = enrichments;
    return this;
  }

   /**
   * Get enrichments
   * @return enrichments
  **/
  @javax.annotation.Nullable

  public EventPipelineInfoEnrichments getEnrichments() {
    return enrichments;
  }


  public void setEnrichments(EventPipelineInfoEnrichments enrichments) {
    this.enrichments = enrichments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventPipelineInfo eventPipelineInfo = (EventPipelineInfo) o;
    return Objects.equals(this.eventSchema, eventPipelineInfo.eventSchema) &&
        Objects.equals(this.usageMeters, eventPipelineInfo.usageMeters) &&
        Objects.equals(this.pricePlans, eventPipelineInfo.pricePlans) &&
        Objects.equals(this.account, eventPipelineInfo.account) &&
        Objects.equals(this.customer, eventPipelineInfo.customer) &&
        Objects.equals(this.enrichments, eventPipelineInfo.enrichments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventSchema, usageMeters, pricePlans, account, customer, enrichments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventPipelineInfo {\n");
    sb.append("    eventSchema: ").append(toIndentedString(eventSchema)).append("\n");
    sb.append("    usageMeters: ").append(toIndentedString(usageMeters)).append("\n");
    sb.append("    pricePlans: ").append(toIndentedString(pricePlans)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    enrichments: ").append(toIndentedString(enrichments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventSchema");
    openapiFields.add("usageMeters");
    openapiFields.add("pricePlans");
    openapiFields.add("account");
    openapiFields.add("customer");
    openapiFields.add("enrichments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventPipelineInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventPipelineInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventPipelineInfo is not found in the empty JSON string", EventPipelineInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EventPipelineInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventPipelineInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `eventSchema`
      if (jsonObj.get("eventSchema") != null && !jsonObj.get("eventSchema").isJsonNull()) {
        EventPipelineInfoEventSchema.validateJsonObject(jsonObj.getAsJsonObject("eventSchema"));
      }
      if (jsonObj.get("usageMeters") != null && !jsonObj.get("usageMeters").isJsonNull()) {
        JsonArray jsonArrayusageMeters = jsonObj.getAsJsonArray("usageMeters");
        if (jsonArrayusageMeters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usageMeters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usageMeters` to be an array in the JSON string but got `%s`", jsonObj.get("usageMeters").toString()));
          }

          // validate the optional field `usageMeters` (array)
          for (int i = 0; i < jsonArrayusageMeters.size(); i++) {
            EventPipelineInfoUsageMeters.validateJsonObject(jsonArrayusageMeters.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("pricePlans") != null && !jsonObj.get("pricePlans").isJsonNull()) {
        JsonArray jsonArraypricePlans = jsonObj.getAsJsonArray("pricePlans");
        if (jsonArraypricePlans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pricePlans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pricePlans` to be an array in the JSON string but got `%s`", jsonObj.get("pricePlans").toString()));
          }

          // validate the optional field `pricePlans` (array)
          for (int i = 0; i < jsonArraypricePlans.size(); i++) {
            EventPipelineInfoPricePlans.validateJsonObject(jsonArraypricePlans.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        EventPipelineInfoAccount.validateJsonObject(jsonObj.getAsJsonObject("account"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        EventPipelineInfoCustomer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      // validate the optional field `enrichments`
      if (jsonObj.get("enrichments") != null && !jsonObj.get("enrichments").isJsonNull()) {
        EventPipelineInfoEnrichments.validateJsonObject(jsonObj.getAsJsonObject("enrichments"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventPipelineInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventPipelineInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventPipelineInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventPipelineInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EventPipelineInfo>() {
           @Override
           public void write(JsonWriter out, EventPipelineInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventPipelineInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventPipelineInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventPipelineInfo
  * @throws IOException if the JSON string is invalid with respect to EventPipelineInfo
  */
  public static EventPipelineInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventPipelineInfo.class);
  }

 /**
  * Convert an instance of EventPipelineInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

