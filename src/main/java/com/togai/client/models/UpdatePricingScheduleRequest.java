/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.CreatePricePlanDetailsOverride;
import java.io.IOException;
import java.time.LocalDate;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to dis/associate a price plan to an account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdatePricingScheduleRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Mode of request to create dis/association
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    ASSOCIATE("ASSOCIATE"),
    
    DISASSOCIATE("DISASSOCIATE");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_PRICE_PLAN_ID = "pricePlanId";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_ID)
  private String pricePlanId;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private LocalDate effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_UNTIL = "effectiveUntil";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNTIL)
  private LocalDate effectiveUntil;

  public static final String SERIALIZED_NAME_PRICE_PLAN_DETAILS_OVERRIDE = "pricePlanDetailsOverride";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_DETAILS_OVERRIDE)
  private CreatePricePlanDetailsOverride pricePlanDetailsOverride;

  public UpdatePricingScheduleRequest() {
  }

  public UpdatePricingScheduleRequest mode(ModeEnum mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * Mode of request to create dis/association
   * @return mode
  **/
  @javax.annotation.Nullable

  public ModeEnum getMode() {
    return mode;
  }


  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public UpdatePricingScheduleRequest pricePlanId(String pricePlanId) {
    
    this.pricePlanId = pricePlanId;
    return this;
  }

   /**
   * Id of the price plan if association request
   * @return pricePlanId
  **/
  @javax.annotation.Nullable

  public String getPricePlanId() {
    return pricePlanId;
  }


  public void setPricePlanId(String pricePlanId) {
    this.pricePlanId = pricePlanId;
  }


  public UpdatePricingScheduleRequest effectiveFrom(LocalDate effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * Date of effectiveness of the association. - Expected only if the account already has a price plan associated with it. 
   * @return effectiveFrom
  **/
  @javax.annotation.Nonnull

  public LocalDate getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(LocalDate effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public UpdatePricingScheduleRequest effectiveUntil(LocalDate effectiveUntil) {
    
    this.effectiveUntil = effectiveUntil;
    return this;
  }

   /**
   * Date until which the association must be effective. - Expected only if effectiveFrom is present. 
   * @return effectiveUntil
  **/
  @javax.annotation.Nonnull

  public LocalDate getEffectiveUntil() {
    return effectiveUntil;
  }


  public void setEffectiveUntil(LocalDate effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
  }


  public UpdatePricingScheduleRequest pricePlanDetailsOverride(CreatePricePlanDetailsOverride pricePlanDetailsOverride) {
    
    this.pricePlanDetailsOverride = pricePlanDetailsOverride;
    return this;
  }

   /**
   * Get pricePlanDetailsOverride
   * @return pricePlanDetailsOverride
  **/
  @javax.annotation.Nullable

  public CreatePricePlanDetailsOverride getPricePlanDetailsOverride() {
    return pricePlanDetailsOverride;
  }


  public void setPricePlanDetailsOverride(CreatePricePlanDetailsOverride pricePlanDetailsOverride) {
    this.pricePlanDetailsOverride = pricePlanDetailsOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePricingScheduleRequest updatePricingScheduleRequest = (UpdatePricingScheduleRequest) o;
    return Objects.equals(this.mode, updatePricingScheduleRequest.mode) &&
        Objects.equals(this.pricePlanId, updatePricingScheduleRequest.pricePlanId) &&
        Objects.equals(this.effectiveFrom, updatePricingScheduleRequest.effectiveFrom) &&
        Objects.equals(this.effectiveUntil, updatePricingScheduleRequest.effectiveUntil) &&
        Objects.equals(this.pricePlanDetailsOverride, updatePricingScheduleRequest.pricePlanDetailsOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, pricePlanId, effectiveFrom, effectiveUntil, pricePlanDetailsOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePricingScheduleRequest {\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    pricePlanId: ").append(toIndentedString(pricePlanId)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveUntil: ").append(toIndentedString(effectiveUntil)).append("\n");
    sb.append("    pricePlanDetailsOverride: ").append(toIndentedString(pricePlanDetailsOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mode");
    openapiFields.add("pricePlanId");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveUntil");
    openapiFields.add("pricePlanDetailsOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveFrom");
    openapiRequiredFields.add("effectiveUntil");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdatePricingScheduleRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdatePricingScheduleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePricingScheduleRequest is not found in the empty JSON string", UpdatePricingScheduleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdatePricingScheduleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePricingScheduleRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePricingScheduleRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("pricePlanId") != null && !jsonObj.get("pricePlanId").isJsonNull()) && !jsonObj.get("pricePlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricePlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricePlanId").toString()));
      }
      // validate the optional field `pricePlanDetailsOverride`
      if (jsonObj.get("pricePlanDetailsOverride") != null && !jsonObj.get("pricePlanDetailsOverride").isJsonNull()) {
        CreatePricePlanDetailsOverride.validateJsonObject(jsonObj.getAsJsonObject("pricePlanDetailsOverride"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePricingScheduleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePricingScheduleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePricingScheduleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePricingScheduleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePricingScheduleRequest>() {
           @Override
           public void write(JsonWriter out, UpdatePricingScheduleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePricingScheduleRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdatePricingScheduleRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdatePricingScheduleRequest
  * @throws IOException if the JSON string is invalid with respect to UpdatePricingScheduleRequest
  */
  public static UpdatePricingScheduleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePricingScheduleRequest.class);
  }

 /**
  * Convert an instance of UpdatePricingScheduleRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

