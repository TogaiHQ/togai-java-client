/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.InvoiceDetails;
import com.togai.client.models.InvoiceLineItem;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Structure of invoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Invoice implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_PRICE_PLAN_ID = "pricePlanId";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_ID)
  private String pricePlanId;

  public static final String SERIALIZED_NAME_USAGE_INFO = "usageInfo";
  @SerializedName(SERIALIZED_NAME_USAGE_INFO)
  private List<InvoiceLineItem> usageInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVENUE_INFO = "revenueInfo";
  @SerializedName(SERIALIZED_NAME_REVENUE_INFO)
  private InvoiceLineItem revenueInfo;

  public static final String SERIALIZED_NAME_INVOICE_DETAILS = "invoiceDetails";
  @SerializedName(SERIALIZED_NAME_INVOICE_DETAILS)
  private InvoiceDetails invoiceDetails;

  /**
   * Status of the invoice
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ONGOING("ONGOING"),
    
    GRACE_PERIOD("GRACE_PERIOD"),
    
    GENERATED("GENERATED"),
    
    PUBLISHED("PUBLISHED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoiceDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private OffsetDateTime invoiceDate;

  public static final String SERIALIZED_NAME_GENERATED_AT = "generatedAt";
  @SerializedName(SERIALIZED_NAME_GENERATED_AT)
  private OffsetDateTime generatedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Invoice() {
  }

  public Invoice id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Identifier of customer
   * @return id
  **/
  @javax.annotation.Nonnull

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Invoice customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nonnull

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Invoice accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nonnull

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Invoice pricePlanId(String pricePlanId) {
    
    this.pricePlanId = pricePlanId;
    return this;
  }

   /**
   * Get pricePlanId
   * @return pricePlanId
  **/
  @javax.annotation.Nonnull

  public String getPricePlanId() {
    return pricePlanId;
  }


  public void setPricePlanId(String pricePlanId) {
    this.pricePlanId = pricePlanId;
  }


  public Invoice usageInfo(List<InvoiceLineItem> usageInfo) {
    
    this.usageInfo = usageInfo;
    return this;
  }

  public Invoice addUsageInfoItem(InvoiceLineItem usageInfoItem) {
    if (this.usageInfo == null) {
      this.usageInfo = new ArrayList<>();
    }
    this.usageInfo.add(usageInfoItem);
    return this;
  }

   /**
   * Get usageInfo
   * @return usageInfo
  **/
  @javax.annotation.Nullable

  public List<InvoiceLineItem> getUsageInfo() {
    return usageInfo;
  }


  public void setUsageInfo(List<InvoiceLineItem> usageInfo) {
    this.usageInfo = usageInfo;
  }


  public Invoice revenueInfo(InvoiceLineItem revenueInfo) {
    
    this.revenueInfo = revenueInfo;
    return this;
  }

   /**
   * Get revenueInfo
   * @return revenueInfo
  **/
  @javax.annotation.Nullable

  public InvoiceLineItem getRevenueInfo() {
    return revenueInfo;
  }


  public void setRevenueInfo(InvoiceLineItem revenueInfo) {
    this.revenueInfo = revenueInfo;
  }


  public Invoice invoiceDetails(InvoiceDetails invoiceDetails) {
    
    this.invoiceDetails = invoiceDetails;
    return this;
  }

   /**
   * Get invoiceDetails
   * @return invoiceDetails
  **/
  @javax.annotation.Nullable

  public InvoiceDetails getInvoiceDetails() {
    return invoiceDetails;
  }


  public void setInvoiceDetails(InvoiceDetails invoiceDetails) {
    this.invoiceDetails = invoiceDetails;
  }


  public Invoice status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the invoice
   * @return status
  **/
  @javax.annotation.Nonnull

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Invoice startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of the invoice
   * @return startDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public Invoice endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date of the invoice
   * @return endDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public Invoice invoiceDate(OffsetDateTime invoiceDate) {
    
    this.invoiceDate = invoiceDate;
    return this;
  }

   /**
   * Invoice date of the invoice
   * @return invoiceDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getInvoiceDate() {
    return invoiceDate;
  }


  public void setInvoiceDate(OffsetDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public Invoice generatedAt(OffsetDateTime generatedAt) {
    
    this.generatedAt = generatedAt;
    return this;
  }

   /**
   * Get generatedAt
   * @return generatedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getGeneratedAt() {
    return generatedAt;
  }


  public void setGeneratedAt(OffsetDateTime generatedAt) {
    this.generatedAt = generatedAt;
  }


  public Invoice updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.id, invoice.id) &&
        Objects.equals(this.customerId, invoice.customerId) &&
        Objects.equals(this.accountId, invoice.accountId) &&
        Objects.equals(this.pricePlanId, invoice.pricePlanId) &&
        Objects.equals(this.usageInfo, invoice.usageInfo) &&
        Objects.equals(this.revenueInfo, invoice.revenueInfo) &&
        Objects.equals(this.invoiceDetails, invoice.invoiceDetails) &&
        Objects.equals(this.status, invoice.status) &&
        Objects.equals(this.startDate, invoice.startDate) &&
        Objects.equals(this.endDate, invoice.endDate) &&
        Objects.equals(this.invoiceDate, invoice.invoiceDate) &&
        Objects.equals(this.generatedAt, invoice.generatedAt) &&
        Objects.equals(this.updatedAt, invoice.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, customerId, accountId, pricePlanId, usageInfo, revenueInfo, invoiceDetails, status, startDate, endDate, invoiceDate, generatedAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    pricePlanId: ").append(toIndentedString(pricePlanId)).append("\n");
    sb.append("    usageInfo: ").append(toIndentedString(usageInfo)).append("\n");
    sb.append("    revenueInfo: ").append(toIndentedString(revenueInfo)).append("\n");
    sb.append("    invoiceDetails: ").append(toIndentedString(invoiceDetails)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    generatedAt: ").append(toIndentedString(generatedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("customerId");
    openapiFields.add("accountId");
    openapiFields.add("pricePlanId");
    openapiFields.add("usageInfo");
    openapiFields.add("revenueInfo");
    openapiFields.add("invoiceDetails");
    openapiFields.add("status");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("invoiceDate");
    openapiFields.add("generatedAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("customerId");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("pricePlanId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("invoiceDate");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Invoice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Invoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Invoice is not found in the empty JSON string", Invoice.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Invoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Invoice` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Invoice.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("pricePlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricePlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricePlanId").toString()));
      }
      if (jsonObj.get("usageInfo") != null && !jsonObj.get("usageInfo").isJsonNull()) {
        JsonArray jsonArrayusageInfo = jsonObj.getAsJsonArray("usageInfo");
        if (jsonArrayusageInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usageInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usageInfo` to be an array in the JSON string but got `%s`", jsonObj.get("usageInfo").toString()));
          }

          // validate the optional field `usageInfo` (array)
          for (int i = 0; i < jsonArrayusageInfo.size(); i++) {
            InvoiceLineItem.validateJsonObject(jsonArrayusageInfo.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `revenueInfo`
      if (jsonObj.get("revenueInfo") != null && !jsonObj.get("revenueInfo").isJsonNull()) {
        InvoiceLineItem.validateJsonObject(jsonObj.getAsJsonObject("revenueInfo"));
      }
      // validate the optional field `invoiceDetails`
      if (jsonObj.get("invoiceDetails") != null && !jsonObj.get("invoiceDetails").isJsonNull()) {
        InvoiceDetails.validateJsonObject(jsonObj.getAsJsonObject("invoiceDetails"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Invoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Invoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Invoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Invoice.class));

       return (TypeAdapter<T>) new TypeAdapter<Invoice>() {
           @Override
           public void write(JsonWriter out, Invoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Invoice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Invoice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Invoice
  * @throws IOException if the JSON string is invalid with respect to Invoice
  */
  public static Invoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Invoice.class);
  }

 /**
  * Convert an instance of Invoice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

