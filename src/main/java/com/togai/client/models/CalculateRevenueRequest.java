/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.CurrencyConfig;
import com.togai.client.models.PricePlanDetailsConfig;
import com.togai.client.models.UsageConfig;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to get revenue details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CalculateRevenueRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CURRENCY_CONFIG = "currencyConfig";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONFIG)
  private CurrencyConfig currencyConfig;

  public static final String SERIALIZED_NAME_PRICE_PLAN_DETAILS_CONFIG = "pricePlanDetailsConfig";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_DETAILS_CONFIG)
  private PricePlanDetailsConfig pricePlanDetailsConfig;

  public static final String SERIALIZED_NAME_USAGE_CONFIG = "usageConfig";
  @SerializedName(SERIALIZED_NAME_USAGE_CONFIG)
  private UsageConfig usageConfig;

  public CalculateRevenueRequest() {
  }

  public CalculateRevenueRequest currencyConfig(CurrencyConfig currencyConfig) {
    
    this.currencyConfig = currencyConfig;
    return this;
  }

   /**
   * Get currencyConfig
   * @return currencyConfig
  **/
  @javax.annotation.Nonnull

  public CurrencyConfig getCurrencyConfig() {
    return currencyConfig;
  }


  public void setCurrencyConfig(CurrencyConfig currencyConfig) {
    this.currencyConfig = currencyConfig;
  }


  public CalculateRevenueRequest pricePlanDetailsConfig(PricePlanDetailsConfig pricePlanDetailsConfig) {
    
    this.pricePlanDetailsConfig = pricePlanDetailsConfig;
    return this;
  }

   /**
   * Get pricePlanDetailsConfig
   * @return pricePlanDetailsConfig
  **/
  @javax.annotation.Nonnull

  public PricePlanDetailsConfig getPricePlanDetailsConfig() {
    return pricePlanDetailsConfig;
  }


  public void setPricePlanDetailsConfig(PricePlanDetailsConfig pricePlanDetailsConfig) {
    this.pricePlanDetailsConfig = pricePlanDetailsConfig;
  }


  public CalculateRevenueRequest usageConfig(UsageConfig usageConfig) {
    
    this.usageConfig = usageConfig;
    return this;
  }

   /**
   * Get usageConfig
   * @return usageConfig
  **/
  @javax.annotation.Nonnull

  public UsageConfig getUsageConfig() {
    return usageConfig;
  }


  public void setUsageConfig(UsageConfig usageConfig) {
    this.usageConfig = usageConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateRevenueRequest calculateRevenueRequest = (CalculateRevenueRequest) o;
    return Objects.equals(this.currencyConfig, calculateRevenueRequest.currencyConfig) &&
        Objects.equals(this.pricePlanDetailsConfig, calculateRevenueRequest.pricePlanDetailsConfig) &&
        Objects.equals(this.usageConfig, calculateRevenueRequest.usageConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyConfig, pricePlanDetailsConfig, usageConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateRevenueRequest {\n");
    sb.append("    currencyConfig: ").append(toIndentedString(currencyConfig)).append("\n");
    sb.append("    pricePlanDetailsConfig: ").append(toIndentedString(pricePlanDetailsConfig)).append("\n");
    sb.append("    usageConfig: ").append(toIndentedString(usageConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyConfig");
    openapiFields.add("pricePlanDetailsConfig");
    openapiFields.add("usageConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currencyConfig");
    openapiRequiredFields.add("pricePlanDetailsConfig");
    openapiRequiredFields.add("usageConfig");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CalculateRevenueRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CalculateRevenueRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculateRevenueRequest is not found in the empty JSON string", CalculateRevenueRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CalculateRevenueRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculateRevenueRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CalculateRevenueRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `currencyConfig`
      CurrencyConfig.validateJsonObject(jsonObj.getAsJsonObject("currencyConfig"));
      // validate the required field `pricePlanDetailsConfig`
      PricePlanDetailsConfig.validateJsonObject(jsonObj.getAsJsonObject("pricePlanDetailsConfig"));
      // validate the required field `usageConfig`
      UsageConfig.validateJsonObject(jsonObj.getAsJsonObject("usageConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculateRevenueRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculateRevenueRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculateRevenueRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculateRevenueRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculateRevenueRequest>() {
           @Override
           public void write(JsonWriter out, CalculateRevenueRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculateRevenueRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CalculateRevenueRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CalculateRevenueRequest
  * @throws IOException if the JSON string is invalid with respect to CalculateRevenueRequest
  */
  public static CalculateRevenueRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculateRevenueRequest.class);
  }

 /**
  * Convert an instance of CalculateRevenueRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

