/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.InternalSlab;
import com.togai.client.models.PricingModel;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * InternalUsageRateCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InternalUsageRateCard implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_USAGE_METER_ID = "usageMeterId";
  @SerializedName(SERIALIZED_NAME_USAGE_METER_ID)
  private String usageMeterId;

  public static final String SERIALIZED_NAME_PRICING_MODEL = "pricingModel";
  @SerializedName(SERIALIZED_NAME_PRICING_MODEL)
  private PricingModel pricingModel;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_INTERNAL_SLABS = "internalSlabs";
  @SerializedName(SERIALIZED_NAME_INTERNAL_SLABS)
  private List<InternalSlab> internalSlabs = new ArrayList<>();

  public InternalUsageRateCard() {
  }

  public InternalUsageRateCard id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public InternalUsageRateCard displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nonnull

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public InternalUsageRateCard usageMeterId(String usageMeterId) {
    
    this.usageMeterId = usageMeterId;
    return this;
  }

   /**
   * Get usageMeterId
   * @return usageMeterId
  **/
  @javax.annotation.Nonnull

  public String getUsageMeterId() {
    return usageMeterId;
  }


  public void setUsageMeterId(String usageMeterId) {
    this.usageMeterId = usageMeterId;
  }


  public InternalUsageRateCard pricingModel(PricingModel pricingModel) {
    
    this.pricingModel = pricingModel;
    return this;
  }

   /**
   * Get pricingModel
   * @return pricingModel
  **/
  @javax.annotation.Nonnull

  public PricingModel getPricingModel() {
    return pricingModel;
  }


  public void setPricingModel(PricingModel pricingModel) {
    this.pricingModel = pricingModel;
  }


  public InternalUsageRateCard currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public InternalUsageRateCard internalSlabs(List<InternalSlab> internalSlabs) {
    
    this.internalSlabs = internalSlabs;
    return this;
  }

  public InternalUsageRateCard addInternalSlabsItem(InternalSlab internalSlabsItem) {
    this.internalSlabs.add(internalSlabsItem);
    return this;
  }

   /**
   * Get internalSlabs
   * @return internalSlabs
  **/
  @javax.annotation.Nonnull

  public List<InternalSlab> getInternalSlabs() {
    return internalSlabs;
  }


  public void setInternalSlabs(List<InternalSlab> internalSlabs) {
    this.internalSlabs = internalSlabs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternalUsageRateCard internalUsageRateCard = (InternalUsageRateCard) o;
    return Objects.equals(this.id, internalUsageRateCard.id) &&
        Objects.equals(this.displayName, internalUsageRateCard.displayName) &&
        Objects.equals(this.usageMeterId, internalUsageRateCard.usageMeterId) &&
        Objects.equals(this.pricingModel, internalUsageRateCard.pricingModel) &&
        Objects.equals(this.currency, internalUsageRateCard.currency) &&
        Objects.equals(this.internalSlabs, internalUsageRateCard.internalSlabs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, usageMeterId, pricingModel, currency, internalSlabs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternalUsageRateCard {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    usageMeterId: ").append(toIndentedString(usageMeterId)).append("\n");
    sb.append("    pricingModel: ").append(toIndentedString(pricingModel)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    internalSlabs: ").append(toIndentedString(internalSlabs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("displayName");
    openapiFields.add("usageMeterId");
    openapiFields.add("pricingModel");
    openapiFields.add("currency");
    openapiFields.add("internalSlabs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("usageMeterId");
    openapiRequiredFields.add("pricingModel");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("internalSlabs");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InternalUsageRateCard
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InternalUsageRateCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InternalUsageRateCard is not found in the empty JSON string", InternalUsageRateCard.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InternalUsageRateCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InternalUsageRateCard` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InternalUsageRateCard.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("usageMeterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageMeterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageMeterId").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("internalSlabs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalSlabs` to be an array in the JSON string but got `%s`", jsonObj.get("internalSlabs").toString()));
      }

      JsonArray jsonArrayinternalSlabs = jsonObj.getAsJsonArray("internalSlabs");
      // validate the required field `internalSlabs` (array)
      for (int i = 0; i < jsonArrayinternalSlabs.size(); i++) {
        InternalSlab.validateJsonObject(jsonArrayinternalSlabs.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InternalUsageRateCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InternalUsageRateCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InternalUsageRateCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InternalUsageRateCard.class));

       return (TypeAdapter<T>) new TypeAdapter<InternalUsageRateCard>() {
           @Override
           public void write(JsonWriter out, InternalUsageRateCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InternalUsageRateCard read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InternalUsageRateCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InternalUsageRateCard
  * @throws IOException if the JSON string is invalid with respect to InternalUsageRateCard
  */
  public static InternalUsageRateCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InternalUsageRateCard.class);
  }

 /**
  * Convert an instance of InternalUsageRateCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

