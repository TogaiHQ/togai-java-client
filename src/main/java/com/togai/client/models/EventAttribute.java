/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Metric to be recorded
 */
@ApiModel(description = "Metric to be recorded")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventAttribute implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attributeName";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
  private String attributeName;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE = "attributeValue";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE)
  private String attributeValue;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE_UNIT = "attributeValueUnit";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE_UNIT)
  private String attributeValueUnit;

  public EventAttribute() {
  }

  public EventAttribute attributeName(String attributeName) {
    
    this.attributeName = attributeName;
    return this;
  }

   /**
   * Name of the event attribute
   * @return attributeName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "apiUsage", required = true, value = "Name of the event attribute")

  public String getAttributeName() {
    return attributeName;
  }


  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  public EventAttribute attributeValue(String attributeValue) {
    
    this.attributeValue = attributeValue;
    return this;
  }

   /**
   * Value of the event attribute
   * @return attributeValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Value of the event attribute")

  public String getAttributeValue() {
    return attributeValue;
  }


  public void setAttributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
  }


  public EventAttribute attributeValueUnit(String attributeValueUnit) {
    
    this.attributeValueUnit = attributeValueUnit;
    return this;
  }

   /**
   * Unit with which the attribute value was measured. Natively supported units - \&quot;Meters, Miles, Kilometers, Grams, Kilograms, ounces, Pounds, Minutes, Hours, Seconds, Milliseconds, Microseconds, None\&quot;. Clients are free to add any other custom units.
   * @return attributeValueUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unit with which the attribute value was measured. Natively supported units - \"Meters, Miles, Kilometers, Grams, Kilograms, ounces, Pounds, Minutes, Hours, Seconds, Milliseconds, Microseconds, None\". Clients are free to add any other custom units.")

  public String getAttributeValueUnit() {
    return attributeValueUnit;
  }


  public void setAttributeValueUnit(String attributeValueUnit) {
    this.attributeValueUnit = attributeValueUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventAttribute eventAttribute = (EventAttribute) o;
    return Objects.equals(this.attributeName, eventAttribute.attributeName) &&
        Objects.equals(this.attributeValue, eventAttribute.attributeValue) &&
        Objects.equals(this.attributeValueUnit, eventAttribute.attributeValueUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeName, attributeValue, attributeValueUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventAttribute {\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
    sb.append("    attributeValueUnit: ").append(toIndentedString(attributeValueUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeName");
    openapiFields.add("attributeValue");
    openapiFields.add("attributeValueUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attributeName");
    openapiRequiredFields.add("attributeValue");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventAttribute
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EventAttribute.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventAttribute is not found in the empty JSON string", EventAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EventAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventAttribute` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventAttribute.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("attributeName") != null && !jsonObj.get("attributeName").isJsonNull()) && !jsonObj.get("attributeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeName").toString()));
      }
      if ((jsonObj.get("attributeValue") != null && !jsonObj.get("attributeValue").isJsonNull()) && !jsonObj.get("attributeValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeValue").toString()));
      }
      if ((jsonObj.get("attributeValueUnit") != null && !jsonObj.get("attributeValueUnit").isJsonNull()) && !jsonObj.get("attributeValueUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeValueUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeValueUnit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<EventAttribute>() {
           @Override
           public void write(JsonWriter out, EventAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventAttribute read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventAttribute given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventAttribute
  * @throws IOException if the JSON string is invalid with respect to EventAttribute
  */
  public static EventAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventAttribute.class);
  }

 /**
  * Convert an instance of EventAttribute to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

